* Basic Settings
- Interface tweeks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
- Ido stuff
#+BEGIN_SRC emacs-lisp
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
- No backups and autosave
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files         nil) ; Don't want any backup files
  (setq auto-save-list-file-name  nil) ; Don't want any .saves files
  (setq auto-save-default         nil) ; Don't want any auto saving
#+END_SRC
* Languages support
** Lisp
*** Clojure
- Cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :mode "\\.clj$"
    :init
    (add-hook 'clojure-mode-hook 'cider-jack-in))
#+END_SRC
** JavaScript
- Js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js$"
    :init
    (add-hook 'js-mode-hook 'j2-minor-mode))
#+END_SRC
- Jsx-mode
#+BEGIN_SRC emacs-lisp
  (use-package jsx-mode
    :ensure t
    :mode "\\.jsx$")
#+END_SRC
** JSON
- Json-mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode "\\.json$")
#+END_SRC
** HTML/CSS
- Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :mode "\\.html$"
    :init
    (add-hook 'html-mode-hook 'emmet-mode)
    (progn
      (setq emmet-expand-jsx-className? t)))
#+END_SRC
- Web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.html$"
    :init
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t))
#+END_SRC
** Python
- Jedi
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :mode "\\.py$"
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
** Coding Helpers
- Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+END_SRC
- Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
- Dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind 
      (("C-c o" . dumb-jump-go)
       ("C-c p" . dumb-jump-back)
       ("C-c x" . dumb-jump-go-prefer-external)
       ("C-c z" . dumb-jump-go-prefer-external-other-window))
    :ensure t
    :init
    (progn
      (dumb-jump-mode)))
#+END_SRC
- Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC
* Misc packages
** Git
- Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
- Git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode))
#+END_SRC
** Emacs for everything
- Reveal.js
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
#+END_SRC
** Other
- Linum
#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure t
    :init
    (global-linum-mode 1))
#+END_SRC
- Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
- Theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure t
    :init
    (load-theme 'spacemacs-dark t))
#+END_SRC

